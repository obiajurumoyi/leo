---
namespace: ParseStatement
expectation: Fail
outputs:
  - "Error [EPAR0370005]: expected : -- found 'x'\n    --> test:1:9\n     |\n   1 | let mut x = expr;\n     |         ^"
  - "Error [EPAR0370005]: expected : -- found 'x'\n    --> test:1:9\n     |\n   1 | let mut x = ();\n     |         ^"
  - "Error [EPAR0370005]: expected : -- found 'x'\n    --> test:1:9\n     |\n   1 | let mut x = x+y;\n     |         ^"
  - "Error [EPAR0370005]: expected : -- found 'x'\n    --> test:1:9\n     |\n   1 | let mut x = (x,y);\n     |         ^"
  - "Error [EPAR0370005]: expected : -- found 'x'\n    --> test:1:9\n     |\n   1 | let mut x = x();\n     |         ^"
  - "Error [EPAR0370009]: unexpected string: expected 'expression', found 'constant'\n    --> test:1:1\n     |\n   1 | constant mut x = expr;\n     | ^^^^^^^^"
  - "Error [EPAR0370009]: unexpected string: expected 'expression', found 'constant'\n    --> test:1:1\n     |\n   1 | constant mut x = ();\n     | ^^^^^^^^"
  - "Error [EPAR0370009]: unexpected string: expected 'expression', found 'constant'\n    --> test:1:1\n     |\n   1 | constant mut x = x+y;\n     | ^^^^^^^^"
  - "Error [EPAR0370009]: unexpected string: expected 'expression', found 'constant'\n    --> test:1:1\n     |\n   1 | constant mut x = (x,y);\n     | ^^^^^^^^"
  - "Error [EPAR0370009]: unexpected string: expected 'expression', found 'constant'\n    --> test:1:1\n     |\n   1 | constant mut x = x();\n     | ^^^^^^^^"
  - "Error [EPAR0370005]: expected : -- found 'x'\n    --> test:1:9\n     |\n   1 | let mut x: u32 = expr;\n     |         ^"
  - "Error [EPAR0370005]: expected : -- found 'x'\n    --> test:1:9\n     |\n   1 | let mut x: u32 = ();\n     |         ^"
  - "Error [EPAR0370005]: expected : -- found 'x'\n    --> test:1:9\n     |\n   1 | let mut x: u32 = x+y;\n     |         ^"
  - "Error [EPAR0370005]: expected : -- found 'x'\n    --> test:1:9\n     |\n   1 | let mut x: u32 = (x,y);\n     |         ^"
  - "Error [EPAR0370005]: expected : -- found 'x'\n    --> test:1:9\n     |\n   1 | let mut x: u32 = x();\n     |         ^"
  - "Error [EPAR0370009]: unexpected string: expected 'expression', found 'constant'\n    --> test:1:1\n     |\n   1 | constant mut x: u32 = expr;\n     | ^^^^^^^^"
  - "Error [EPAR0370009]: unexpected string: expected 'expression', found 'constant'\n    --> test:1:1\n     |\n   1 | constant mut x: u32 = ();\n     | ^^^^^^^^"
  - "Error [EPAR0370009]: unexpected string: expected 'expression', found 'constant'\n    --> test:1:1\n     |\n   1 | constant mut x: u32 = x+y;\n     | ^^^^^^^^"
  - "Error [EPAR0370009]: unexpected string: expected 'expression', found 'constant'\n    --> test:1:1\n     |\n   1 | constant mut x: u32 = (x,y);\n     | ^^^^^^^^"
  - "Error [EPAR0370009]: unexpected string: expected 'expression', found 'constant'\n    --> test:1:1\n     |\n   1 | constant mut x: u32 = x();\n     | ^^^^^^^^"
  - "Error [EPAR0370009]: unexpected string: expected 'expression', found ','\n    --> test:1:10\n     |\n   1 | let (x,y,,) = ();\n     |          ^"
  - "Error [EPAR0370009]: unexpected string: expected 'expression', found ','\n    --> test:1:6\n     |\n   1 | let (,x,y) = ();\n     |      ^"
  - "Error [EPAR0370009]: unexpected string: expected 'expression', found ','\n    --> test:1:8\n     |\n   1 | let (x,,y) = ();\n     |        ^"
  - "Error [EPAR0370005]: expected integer literal -- found '('\n    --> test:1:13\n     |\n   1 | let x: [u8; (2,,)] = [[0,0], [0,0]];\n     |             ^"
  - "Error [EPAR0370005]: expected 'address', 'bool', 'field', 'Future', 'group', 'scalar', 'signature', 'string', 'i8', 'i16', 'i32', 'i64', 'i128', 'u8', 'u16', 'u32', 'u64', 'u128' -- found 'constant'\n    --> test:1:8\n     |\n   1 | let x: constant = expr;\n     |        ^^^^^^^^"
  - "Error [EPAR0370009]: unexpected string: expected 'expression', found 'constant'\n    --> test:1:1\n     |\n   1 | constant x: let = expr;\n     | ^^^^^^^^"
  - "Error [EPAR0370009]: unexpected string: expected 'expression', found '<eof>'\n    --> test:1:1\n     |\n   1 | let\n     | ^^^"
  - "Error [EPAR0370005]: expected : -- found '<eof>'\n    --> test:1:5\n     |\n   1 | let x\n     |     ^"
  - "Error [EPAR0370005]: expected 'address', 'bool', 'field', 'Future', 'group', 'scalar', 'signature', 'string', 'i8', 'i16', 'i32', 'i64', 'i128', 'u8', 'u16', 'u32', 'u64', 'u128' -- found '<eof>'\n    --> test:1:6\n     |\n   1 | let x:\n     |      ^"
  - "Error [EPAR0370005]: expected : -- found '='\n    --> test:1:7\n     |\n   1 | let x = (a, y]);\n     |       ^"
  - "Error [EPAR0370009]: unexpected string: expected 'expression', found '='\n    --> test:1:5\n     |\n   1 | let = 1u8;\n     |     ^"
  - "Error [EPAR0370009]: unexpected string: expected 'expression', found ';'\n    --> test:1:4\n     |\n   1 | let;\n     |    ^"
  - "Error [EPAR0370005]: expected : -- found '1'\n    --> test:1:7\n     |\n   1 | let x 1u8;\n     |       ^"
  - "Error [EPAR0370005]: expected = -- found ';'\n    --> test:1:10\n     |\n   1 | let x: u8;\n     |          ^"
  - "Error [EPAR0370005]: expected = -- found '<eof>'\n    --> test:1:8\n     |\n   1 | let x: u8\n     |        ^^"
  - "Error [EPAR0370005]: expected 'address', 'bool', 'field', 'Future', 'group', 'scalar', 'signature', 'string', 'i8', 'i16', 'i32', 'i64', 'i128', 'u8', 'u16', 'u32', 'u64', 'u128' -- found '='\n    --> test:1:8\n     |\n   1 | let x: = 1;\n     |        ^"
  - "Error [EPAR0370005]: expected ; -- found ']'\n    --> test:1:11\n     |\n   1 | let x: [u8] = 1;\n     |           ^"
  - "Error [EPAR0370005]: expected integer literal -- found '<eof>'\n    --> test:1:11\n     |\n   1 | let x: [u8;\n     |           ^"
  - "Error [EPAR0370005]: expected ] -- found 'u8'\n    --> test:1:14\n     |\n   1 | let x: [u8; 1u8] = [1,\n     |              ^^"
  - "Error [EPAR0370009]: unexpected string: expected 'expression', found ']'\n    --> test:1:15\n     |\n   1 | let dbg: u8 = ];\n     |               ^"
  - "Error [EPAR0370016]: Could not lex the following content: `ðŸ¦€:`.\n"
  - "Error [EPAR0370005]: expected : -- found '='\n    --> test:1:9\n     |\n   1 | let (x) = ...;\n     |         ^"
  - "Error [EPAR0370029]: A tuple expression must have at least two elements.\n    --> test:1:5\n     |\n   1 | let (x,) = ...;\n     |     ^^^^"
  - "Error [EPAR0370009]: unexpected string: expected 'expression', found '_'\n    --> test:1:5\n     |\n   1 | let _1: u8 = 1u8;\n     |     ^"
  - "Error [EPAR0370017]: Could not parse the implicit value: 1___091.\n    --> test:1:5\n     |\n   1 | let 1___091: u8 = 12u8;\n     |     ^^^^^^^"
